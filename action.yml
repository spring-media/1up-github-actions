name: 'deploy-infrastructure'
author: '1up-team'
description: 'Action to plan and deploy Terraform modules'

inputs:
  service-name:
    description: 'Service name, used to derive Terraform state file on backend'
    required: true
  module-path:
    description: 'Path to the Terraform stack dir'
    required: false
    default: 'terraform'

  pkg-token:
    description: 'User token used to integrate with the spring-media GitHub packages for internal libs'
    required: true

  docker-image-tag:
    description: 'Docker image build tag used when pushing to the 1up AWS ECR'
    required: false
    default: 'b${{ github.run_number }}-${{ github.sha }}'

  github-token:
    description: Github token, current token from secrets
    required: true

  staging:
    description: 'Release to staging environment'
    required: false
    default: 'false'

outputs:
  infrastructure-changes:
    description: "Flag indicating found changes in the terraform module"
    value: ${{ steps.infrastructure-changes.outputs.found }}

runs:
  using: composite
  steps:
    - name: Setup - Validate Inputs
      shell: bash
      run: |
        [[ "${{ inputs.service-name }}" ]] || { echo "input 'service-name' cannot be blank"; exit 1; }
        [[ "${{ inputs.pkg-token }}" ]] || { echo "input 'pkg-token' cannot be blank"; exit 1; }
        [[ "${{ inputs.github-token }}" ]] || { echo "input 'github-token' cannot be blank"; exit 1; }

    - uses: dorny/paths-filter@v2
      id: infrastructure-changes
      with:
        filters: |
          found:
            - '${{ inputs.module-path }}/**'

    - name: Setup - terraform
      if: steps.infrastructure-changes.outputs.found == 'true'
      uses: hashicorp/setup-terraform@v2

    - name: Setup - terraform - git
      if: steps.infrastructure-changes.outputs.found == 'true'
      shell: bash
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://${{ inputs.pkg-token }}@github.com/spring-media".insteadOf "https://github.com/spring-media"



    - name: Release - on staging - echo
      if: |
        steps.infrastructure-changes.outputs.found == 'true' 
        && inputs.staging == 'true'
      shell: bash
      run: |
        echo -e "ðŸ””\nðŸ””       R E L E A S E      S T A G I N G       \nðŸ””"

    - name: Release - on staging - terraform validate and apply
      if: |
        steps.infrastructure-changes.outputs.found == 'true' 
        && inputs.staging == 'true'
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform init -backend-config="key=staging/ecs_service_${{ inputs.service-name }}/terraform.tfstate"
        terraform validate
        terraform apply -var 'environment=staging' -var 'revision=${{ inputs.docker-image-tag }}' -auto-approve



    - name: Release - on production - echo [on master]
      if: |
        steps.infrastructure-changes.outputs.found == 'true'
        && github.ref == 'refs/heads/master'
      shell: bash
      run: |
        echo -e "ðŸ””\nðŸ””       R E L E A S E      P R O D       \nðŸ””"

    - name: Release - on production - terraform validate and plan
      if: steps.infrastructure-changes.outputs.found == 'true'
      working-directory: ${{ inputs.module-path }}
      run: |
        rm -rf .terraform.lock.hcl .terraform/terraform.tfstate || true
        terraform init
        terraform validate
        terraform plan -var 'environment=production' -var 'revision=${{ inputs.docker-image-tag }}' -out tfplan
      shell: bash

    - name: Release - on production - terraform plan
      if: steps.infrastructure-changes.outputs.found == 'true'
      id: terraform-plan
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform show tfplan -no-color

    - name: Release - on production - terraform - find PR number [on master]
      if: |
        steps.infrastructure-changes.outputs.found == 'true' 
        && github.ref != 'refs/heads/master'
      uses: jwalton/gh-find-current-pr@v1
      id: find-pr
      with:
        state: open

    - name: Release - on production - terraform - add plan to PR [on master]
      if: |
        steps.infrastructure-changes.outputs.found == 'true' 
        && github.ref != 'refs/heads/master'
      uses: actions/github-script@v6
      env:
        PULL_REQ_NUMBER: ${{ steps.find-pr.outputs.pr }}
        PLAN: "${{ steps.terraform-plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { PULL_REQ_NUMBER } = process.env
          const prResp = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PULL_REQ_NUMBER,
          });
          let prBody = '';
          
          if (prResp.data.body) {
            const planHeaderIndex = prResp.data.body.indexOf('#### Terraform Plan')
            
            if (planHeaderIndex > 0) {
              prBody = prResp.data.body.substring(0, prBodyPlanIndex);
            }
          }
          const body = prBody
            + '\n<details>\n'
            + '<summary>ðŸ“– Terraform Plan: <strong>${{ steps.terraform-plan.outcome }}</strong></summary>\n'
            + '```hcl\n'
            + process.env.PLAN
            + '```\n'
            + '</details>';

          await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PULL_REQ_NUMBER,
              body,
          });

    - name: Release - on production - terraform apply [on master]
      if: |
        steps.infrastructure-changes.outputs.found == 'true' 
        && github.ref == 'refs/heads/master'
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform apply -var 'environment=production' -var 'revision=${{ inputs.docker-image-tag }}' -auto-approve
