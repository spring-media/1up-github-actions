name: 'build-ecs-gradle'
author: '1up-team'
description: 'Action to build and release Java & Gradle repositories'

inputs:
  java-version:
    description: 'Version number used for actions/setup-java'
    required: false
    default: '17'
  pkg-user:
    description: 'User name used to integrate with the spring-media GitHub packages for internal libs'
    required: true
  pkg-token:
    description: 'User token used to integrate with the spring-media GitHub packages for internal libs'
    required: true
  gradle-cmd:
    description: 'Gradle wrapper run command'
    required: false
    default: './gradlew --info clean build'
  sonar-token:
    description: 'Token used for triggering and uploading the static code analysis to Sonar Cloud'
    required: false

  up-aws-access-key-id:
    description: 'AWS access key id secret used to integrate with aws-cli or docker repository'
    required: true
  up-aws-secret-access-key:
    description: 'AWS access secret key secret used to integrate with aws-cli or docker repository'
    required: true
  docker-image-tag:
    description: 'Docker image build tag used when pushing to the 1up AWS ECR'
    required: false
    default: 'b${{ github.run_number }}-${{ github.sha }}'
  docker-registry:
    description: 'Docker registry URL used when pushing to the 1up AWS ECR'
    required: false
    default: '933782373565.dkr.ecr.eu-west-1.amazonaws.com'

  up-slack-webhook-url:
    description: 'Slack channel webhook URL used when reporting master build status'
    required: true

runs:
  using: composite
  steps:
    - name: Setup Steps
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       S E T U P       \nðŸ””\nðŸ””"
      shell: bash

    - name: Setup - Validate Inputs
      run: |
        [[ "${{ inputs.pkg-user }}" ]] || { echo "input 'pkg-user' cannot be blank"; exit 1; }
        [[ "${{ inputs.pkg-token }}" ]] || { echo "input 'pkg-token' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-aws-access-key-id }}" ]] || { echo "input 'up-aws-access-key-id' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-aws-secret-access-key }}" ]] || { echo "input 'up-aws-secret-access-key' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-slack-webhook-url }}" ]] || { echo "input 'up-slack-webhook-url' cannot be blank"; exit 1; }
      shell: bash

    - name: ï¸ŽSetup - Checkout
      uses: actions/checkout@v2

    - name: ï¸ŽSetup - Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java-version }}
        distribution: corretto
        cache: gradle

    - name: ï¸ŽSetup - Service Name
      run: |
        SERVICE_NAME=${GITHUB_REPOSITORY##*/1up-}
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
      shell: bash

    - name: ï¸ŽSetup - AWS Credentials [on master]
      if: github.ref == 'refs/heads/master'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.up-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.up-aws-secret-access-key }}
        aws-region: eu-west-1

    - name: Setup - Report [on master]
      if: always() && github.ref == 'refs/heads/master'
      run: |
        GIT_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        GIT_COMMIT_MSG_NO_SUFFIX="${GIT_COMMIT_MSG#*\(#}"
        GIT_PR="${GIT_COMMIT_MSG_NO_SUFFIX%\)*}"
        GIT_REPO_URL="https://github.com/${{ github.repository }}"
        GIT_PR_URL="$GIT_REPO_URL/pull/$GIT_PR"
        GIT_REPO_NAME="${{ github.repository }}"
        echo "GIT_ACTIONS_URL=<$GIT_REPO_URL/actions/runs/${{ github.run_id }}|${GIT_REPO_NAME#*/}>" >> $GITHUB_ENV
        [[ "$GIT_PR" =~ ^[0-9]+$ ]] && GIT_PR_MSG="<$GIT_PR_URL|$GIT_COMMIT_MSG>" || GIT_PR_MSG="$GIT_COMMIT_MSG"
        echo "GIT_PR_MSG=$GIT_PR_MSG" >> $GITHUB_ENV
      shell: bash



    - name: Build Steps
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       B U I L D       \nðŸ””\nðŸ””"
      shell: bash

    - name: Build - Gradle
      env:
        GITHUB_PKG_USER: ${{ inputs.pkg-user }}
        GITHUB_PKG_TOKEN: ${{ inputs.pkg-token }}
      run: |
        ${{ inputs.gradle-cmd }}
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
      shell: bash

    - name: Build - Gradle - Annotate Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: build/test-results/**/*.xml
        comment_mode: off

    - name: Build - Sonar - Steps
      if: inputs.sonar-token
      run: echo -e "ðŸ””\nðŸ””       S O N A R       \nðŸ””"
      shell: bash

    - name: Build - Sonar - Cache
      if: inputs.sonar-token
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Build - Sonar - Analyze
      if: inputs.sonar-token
      env:
        GITHUB_TOKEN: ${{ inputs.pkg-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      run: ./gradlew sonarqube --info
      shell: bash

    - name: Build - Docker Image
      run: |
        DOCKER_IMAGE="${{ inputs.docker-registry }}/${{ env.SERVICE_NAME }}:${{ inputs.docker-image-tag }}"
        docker build -t $DOCKER_IMAGE .
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
      shell: bash



    - name: Release Steps
      if: github.ref == 'refs/heads/master'
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       R E L E A S E       \nðŸ””\nðŸ””"
      shell: bash

    - name: Release - Setup AWS ECR Credentials [on master]
      if: github.ref == 'refs/heads/master'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Release - Deploy to ECR [on master]
      if: github.ref == 'refs/heads/master'
      run: docker push ${{ env.DOCKER_IMAGE }}
      shell: bash

    - name: Release - Docker Image [on master]
      if: github.ref == 'refs/heads/master'
      uses: silinternational/ecs-deploy@master
      with:
        aws_access_key_cmd: --aws-access-key
        aws_access_key: ${{ inputs.up-aws-access-key-id }}
        aws_secret_key_cmd: --aws-secret-key
        aws_secret_key: ${{ inputs.up-aws-secret-access-key }}
        cluster_cmd: --cluster
        cluster: up-cluster-production
        image_cmd: --image
        image: ${{ env.DOCKER_IMAGE }}
        region_cmd: --region
        region: eu-west-1
        service_name_cmd: --service-name
        service_name: ${{ env.SERVICE_NAME }}
        timeout_cmd: --timeout
        timeout: 600



    - name: Report Steps
      if: github.ref == 'refs/heads/master'
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       R E P O R T       \nðŸ””\nðŸ””"
      shell: bash

    - name: Report - When Success [on master]
      if: success() && github.ref == 'refs/heads/master'
      uses: Ilshidur/action-slack@2.0.2
      env:
        SLACK_WEBHOOK: ${{ inputs.up-slack-webhook-url }}
        SLACK_CUSTOM_PAYLOAD: '{"channel": "1up-releases", "attachments":[{"color": "#2eb886", "blocks":[{"type":"section","text":{"type":"mrkdwn","text": "{{ GIT_ACTIONS_URL }} released\n{{ GIT_PR_MSG }}"}}]}]}'
    - name: Report - When Failure [on master]
      if: failure() && github.ref == 'refs/heads/master'
      uses: Ilshidur/action-slack@2.0.2
      env:
        SLACK_WEBHOOK: ${{ inputs.up-slack-webhook-url }}
        SLACK_CUSTOM_PAYLOAD: '{"channel": "1up-releases",  "attachments":[{"color": "#ed2f00", "blocks":[{"type":"section","text":{"type":"mrkdwn","text": ":boom: {{ GIT_ACTIONS_URL }} failed!\n{{ GIT_PR_MSG }}"}}]}]}'
