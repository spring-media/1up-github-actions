name: 'build-nodejs-lambda'
author: '1up-team'
description: 'Action to build and release nodejs repositories as AWS SAM Lambdas'

inputs:
  node-version:
    description: 'Version number used for actions/setup-node'
    required: false
    default: '16'
  script-cmd:
    description: 'Run script command. Defaults to npm tool'
    required: false
    default: |
      npm install
      npm run prod:build
  sonar-token:
    description: 'Token used for triggering and uploading the static code analysis to Sonar Cloud'
    required: false

  up-aws-access-key-id:
    description: 'AWS access key id secret used to integrate with aws-cli or docker repository'
    required: true
  up-aws-secret-access-key:
    description: 'AWS access secret key secret used to integrate with aws-cli or docker repository'
    required: true

  up-slack-webhook-url:
    description: 'Slack channel webhook URL used when reporting master build status'
    required: true

  github-token:
    description: Github token, current token from secrets
    required: false

runs:
  using: composite
  steps:

    - name: Setup - colors
      run: echo "FORCE_COLOR=true" >> $GITHUB_ENV
      shell: bash

    - name: Setup - echo
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       S E T U P       \nðŸ””\nðŸ””"
      shell: bash

    - name: Setup - Validate Inputs
      run: |
        [[ "${{ inputs.up-aws-access-key-id }}" ]] || { echo "input 'up-aws-access-key-id' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-aws-secret-access-key }}" ]] || { echo "input 'up-aws-secret-access-key' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-slack-webhook-url }}" ]] || { echo "input 'up-slack-webhook-url' cannot be blank"; exit 1; }
      shell: bash

    - name: ï¸ŽSetup - Checkout
      uses: actions/checkout@v3

    - name: ï¸ŽSetup - Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: npm

    - name: ï¸ŽSetup - Service Name
      run: |
        SERVICE_NAME=${GITHUB_REPOSITORY##*/1up-}
        echo "Setup Service name: $SERVICE_NAME"
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
      shell: bash

    - name: ï¸ŽSetup - AWS Credentials [on master]
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.up-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.up-aws-secret-access-key }}
        aws-region: eu-west-1

    - name: Build - echo
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       B U I L D       \nðŸ””\nðŸ””"
      shell: bash

    - name: Build - AWS SAM
      run: ${{ inputs.script-cmd }}
      shell: bash

    - name: Build - AWS SAM - Annotate Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: coverage/**/*.xml
        comment_mode: off

    - name: Release - on production - echo [on master]
      if: github.ref == 'refs/heads/master'
      run: echo -e "ðŸ””\nðŸ””       R E L E A S E      P R O D       \nðŸ””"
      shell: bash

    - name: Release - on production [on master]
      if: github.ref == 'refs/heads/master'
      run: npm run sam:deploy
      shell: bash

    - name: Report - echo [on master]
      if: github.ref == 'refs/heads/master'
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       R E P O R T       \nðŸ””\nðŸ””"
      shell: bash

    - name: Setup - Report [on master]
      if: always() && github.ref == 'refs/heads/master'
      run: |
        GIT_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        GIT_COMMIT_MSG_NO_SUFFIX="${GIT_COMMIT_MSG#*\(#}"
        GIT_PR="${GIT_COMMIT_MSG_NO_SUFFIX%\)*}"
        GIT_REPO_URL="https://github.com/${{ github.repository }}"
        GIT_PR_URL="$GIT_REPO_URL/pull/$GIT_PR"
        GIT_REPO_NAME="${{ github.repository }}"
        echo "GIT_ACTIONS_URL=<$GIT_REPO_URL/actions/runs/${{ github.run_id }}|${GIT_REPO_NAME#*/}>" >> $GITHUB_ENV
        [[ "$GIT_PR" =~ ^[0-9]+$ ]] && GIT_PR_MSG="<$GIT_PR_URL|$GIT_COMMIT_MSG>" || GIT_PR_MSG="$GIT_COMMIT_MSG"
        echo "GIT_PR_MSG=$GIT_PR_MSG" >> $GITHUB_ENV
      shell: bash

    - name: Report - success [on master]
      if: success() && github.ref == 'refs/heads/master'
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.up-slack-webhook-url }}
      with:
        channel-id: "1up-releases"
        payload: |
          {
            "attachments": [
              {
                "color": "#2eb886",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "${{ env.GIT_ACTIONS_URL }} deployed successfully!\n${{ env.GIT_PR_MSG }}"
                    }
                  }
                ]
              }
            ]
          }

    - name: Report - failure [on master]
      if: failure() && github.ref == 'refs/heads/master'
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.up-slack-webhook-url }}
      with:
        channel-id: "1up-releases"
        payload: |
          {
            "attachments": [
              {
                "color": "#ed2f00",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":boom: ${{ env.GIT_ACTIONS_URL }} failed!\n${{ env.GIT_PR_MSG }}"
                    }
                  }
                ]
              }
            ]
          }
