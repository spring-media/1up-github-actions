name: 'deploy-infrastructure'
author: '1up-team'
description: 'Action to plan and deploy Terraform modules'

inputs:
  module-name:
    description: 'Module name, usually equal to its directory name or service name'
    required: false
    default: 'terraform'
  module-path:
    description: 'Absolute path to module, e.g. /terraform, /terraform/vdfproxy-foobar'
    required: false
    default: '/terraform'

  docker-image-tag:
    description: 'Docker image build tag used when pushing to the 1up AWS ECR'
    required: false
    default: 'b${{ github.run_number }}-${{ github.sha }}'
  docker-registry:
    description: 'Docker registry URL used when pushing to the 1up AWS ECR'
    required: false
    default: '933782373565.dkr.ecr.eu-west-1.amazonaws.com'

  github-token:
    description: Github token, current token from secrets
    required: false

  staging:
    description: 'Release to staging environment'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Setup - Validate Inputs
      shell: bash
      run: |
        [[ "${{ inputs.module-name }}" ]] || { echo "input 'module-name' cannot be blank"; exit 1; }
        [[ "${{ inputs.module-path }}" ]] || { echo "input 'module-path' cannot be blank"; exit 1; }

    - name: Setup - terraform
      uses: hashicorp/setup-terraform@v2

    - name: Setup - terraform - git
      shell: bash
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://${{ inputs.pkg-user }}:${{ inputs.pkg-token }}@github.com/spring-media".insteadOf "https://github.com/spring-media"

    - name: Release - on staging - terraform validate and apply
      if: ${{ inputs.staging == 'true' }}
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform init -backend-config="key=staging/ecs_service_${{ inputs.module-name }}/terraform.tfstate"
        terraform validate
        terraform apply -var 'environment=staging' -var 'revision=${{ inputs.docker-image-tag }}' -auto-approve

    - name: Release - on production - echo
      shell: bash
      run: |
        echo -e "ðŸ””\nðŸ””       R E L E A S E      P R O D       \nðŸ””"

    - name: Release - on production - terraform validate and plan
      working-directory: ${{ inputs.module-path }}
      run: |
        rm -rf .terraform.lock.hcl .terraform/terraform.tfstate || true
        terraform init
        terraform validate
        terraform plan -var 'environment=production' -var 'revision=${{ inputs.docker-image-tag }}' -out tfplan
      shell: bash

    - name: Release - on production - terraform plan
      id: terraform-plan
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform show tfplan -no-color

    - name: Release - on production - terraform - find PR number [on master]
      if: github.ref != 'refs/heads/master'
      uses: jwalton/gh-find-current-pr@v1
      id: find-pr
      with:
        state: open

    - name: Release - on production - terraform - add plan to PR [on master]
      if: github.ref != 'refs/heads/master'
      uses: actions/github-script@v6
      env:
        PULL_REQ_NUMBER: ${{ steps.find-pr.outputs.pr }}
        PLAN: "${{ steps.terraform-plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { PULL_REQ_NUMBER } = process.env
          const prResp = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PULL_REQ_NUMBER,
          });
          const prBody = prResp.data.body
            ? prResp.data.body.substring(0, prResp.data.body.indexOf('#### Terraform Plan'))
            : '';
          const body = `${prBody}#### Terraform Plan ðŸ“–\`${{ steps.terraform-plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`hcl\n
          ${process.env.PLAN}
          \`\`\`
          </details>`;
          await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PULL_REQ_NUMBER,
              body,
          });

    - name: Release - on production [on master]
      if: github.ref == 'refs/heads/master'
      uses: silinternational/ecs-deploy@master
      with:
        aws_access_key_cmd: --aws-access-key
        aws_access_key: ${{ inputs.up-aws-access-key-id }}
        aws_secret_key_cmd: --aws-secret-key
        aws_secret_key: ${{ inputs.up-aws-secret-access-key }}
        cluster_cmd: --cluster
        cluster: up-cluster-production
        image_cmd: --image
        image: ${{ env.DOCKER_IMAGE }}
        region_cmd: --region
        region: eu-west-1
        service_name_cmd: --service-name
        service_name: ${{ env.SERVICE_NAME }}
        timeout_cmd: --timeout
        timeout: 600

    - name: Release - on production - terraform apply [on master]
      if: github.ref == 'refs/heads/master'
      working-directory: ${{ inputs.module-path }}
      shell: bash
      run: |
        terraform apply -var 'environment=production' -var 'revision=${{ inputs.docker-image-tag }}' -auto-approve

    - name: Report - echo [on master]
      if: github.ref == 'refs/heads/master'
      shell: bash
      run: |
        echo -e "ðŸ””\nðŸ””\nðŸ””       R E P O R T       \nðŸ””\nðŸ””"

    - name: Report - When Success [on master]
      if: success() && github.ref == 'refs/heads/master'
      uses: Ilshidur/action-slack@2.1.0
      env:
        SLACK_WEBHOOK: ${{ inputs.up-slack-webhook-url }}
        SLACK_CUSTOM_PAYLOAD: '{"channel": "1up-releases", "attachments":[{"color": "#2eb886", "blocks":[{"type":"section","text":{"type":"mrkdwn","text": "{{ GIT_ACTIONS_URL }} released\n{{ GIT_PR_MSG }}"}}]}]}'

    - name: Report - When Failure [on master]
      if: failure() && github.ref == 'refs/heads/master'
      uses: Ilshidur/action-slack@2.1.0
      env:
        SLACK_WEBHOOK: ${{ inputs.up-slack-webhook-url }}
        SLACK_CUSTOM_PAYLOAD: '{"channel": "1up-releases",  "attachments":[{"color": "#ed2f00", "blocks":[{"type":"section","text":{"type":"mrkdwn","text": ":boom: {{ GIT_ACTIONS_URL }} failed!\n{{ GIT_PR_MSG }}"}}]}]}'
