name: 'build-ecs-gradle'
author: '1up-team'
description: 'Action to build and release Java & Gradle repositories'

inputs:
  java-version:
    description: 'Version number used for actions/setup-java'
    required: false
    default: '17'
  pkg-user:
    description: 'User name used to integrate with the spring-media GitHub packages for internal libs'
    required: false
  pkg-token:
    description: 'User token used to integrate with the spring-media GitHub packages for internal libs'
    required: true
  gradle-cmd:
    description: 'Gradle wrapper run command'
    required: false
    default: './gradlew --no-daemon --info clean build'
  sonar-token:
    description: 'Token used for triggering and uploading the static code analysis to Sonar Cloud'
    required: false

  up-aws-access-key-id:
    description: 'AWS access key id secret used to integrate with aws-cli or docker repository'
    required: true
  up-aws-secret-access-key:
    description: 'AWS access secret key secret used to integrate with aws-cli or docker repository'
    required: true
  docker-image-tag:
    description: 'Docker image build tag used when pushing to the 1up AWS ECR'
    required: false
    default: 'b${{ github.run_number }}-${{ github.sha }}'
  docker-registry:
    description: 'Docker registry URL used when pushing to the 1up AWS ECR'
    required: false
    default: '933782373565.dkr.ecr.eu-west-1.amazonaws.com'

  up-slack-webhook-url:
    description: 'Slack channel webhook URL used when reporting master build status'
    required: true

  github-token:
    description: Github token, current token from secrets
    required: false

  staging:
    description: 'Release to staging environment'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Setup - echo
      shell: bash
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       S E T U P       \nðŸ””\nðŸ””"

    - name: Setup - Validate Inputs
      shell: bash
      run: |
        [[ "${{ inputs.pkg-token }}" ]] || { echo "input 'pkg-token' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-aws-access-key-id }}" ]] || { echo "input 'up-aws-access-key-id' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-aws-secret-access-key }}" ]] || { echo "input 'up-aws-secret-access-key' cannot be blank"; exit 1; }
        [[ "${{ inputs.up-slack-webhook-url }}" ]] || { echo "input 'up-slack-webhook-url' cannot be blank"; exit 1; }

    - name: ï¸ŽSetup - Checkout
      uses: actions/checkout@v3

    - name: ï¸ŽSetup - Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java-version }}
        distribution: corretto
        cache: gradle

    - name: ï¸ŽSetup - Service Name
      shell: bash
      run: |
        SERVICE_NAME=${GITHUB_REPOSITORY##*/1up-}
        echo "Setup Service name: $SERVICE_NAME"
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV

    - name: ï¸ŽSetup - AWS Credentials [on master]
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.up-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.up-aws-secret-access-key }}
        aws-region: eu-west-1

    - name: ECR setup
      uses: aws-actions/amazon-ecr-login@v1



    - name: Build - echo
      shell: bash
      run: |
        echo -e "ðŸ””\nðŸ””\nðŸ””       B U I L D       \nðŸ””\nðŸ””"

    - name: Build - Gradle
      shell: bash
      env:
        GITHUB_PKG_USER: ${{ inputs.pkg-user }}
        GITHUB_PKG_TOKEN: ${{ inputs.pkg-token }}
      run: |
        ${{ inputs.gradle-cmd }}
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

    - name: Build - Gradle - Annotate Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: '**/test-results/**/*.xml'
        comment_mode: off



    - name: Build - Sonar - echo
      if: inputs.sonar-token
      shell: bash
      run: echo -e "ðŸ””\nðŸ””       S O N A R       \nðŸ””"

    - name: Build - Sonar - Cache
      if: inputs.sonar-token
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Build - Sonar - Analyze
      if: inputs.sonar-token
      env:
        GITHUB_TOKEN: ${{ inputs.pkg-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      shell: bash
      run: ./gradlew sonar --info



    - name: Build - Docker Image - echo
      shell: bash
      run: echo -e "ðŸ””       D O C K E R      B U I L D"

    - name: Build - Docker Image
      shell: bash
      run: |
        DOCKER_IMAGE="${{ inputs.docker-registry }}/${{ env.SERVICE_NAME }}:${{ inputs.docker-image-tag }}"
        docker build -t $DOCKER_IMAGE .
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

    - name: Release - push Docker image [on master]
      if: ${{ inputs.staging == 'true' }} || github.ref == 'refs/heads/master'
      shell: bash
      run: docker push ${{ env.DOCKER_IMAGE }}



    - name: Release - Terraform - echo
      shell: bash
      run: echo -e "ðŸ””       T E R R A F O R M"

    - uses: dorny/paths-filter@v2
      id: infrastructure-changes
      with:
        filters: |
          terraform:
            - 'terraform/**'

    - name: Release - terraform
      if: steps.infrastructure-changes.outputs.terraform == 'true'
      uses: spring-media/1up-github-actions@deploy-infrastructure
      with:
        service-name: ${{ env.SERVICE_NAME }}
        pkg-token: ${{ inputs.pkg-token }}
        github-token: ${{ inputs.github-token }}
        staging: ${{ inputs.staging }}
        docker-image-tag: ${{ inputs.docker-image-tag }}



    - name: Release - on staging - echo
      if: ${{ inputs.staging == 'true' }}
      shell: bash
      run: echo -e "ðŸ””       R E L E A S E      S T A G I N G"

    - name: Release - on staging
      if: ${{ inputs.staging == 'true' && steps.infrastructure-changes.outputs.terraform == 'false' }}
      uses: silinternational/ecs-deploy@master
      with:
        aws_access_key_cmd: --aws-access-key
        aws_access_key: ${{ inputs.up-aws-access-key-id }}
        aws_secret_key_cmd: --aws-secret-key
        aws_secret_key: ${{ inputs.up-aws-secret-access-key }}
        cluster_cmd: --cluster
        cluster: up-cluster-staging
        image_cmd: --image
        image: ${{ env.DOCKER_IMAGE }}
        region_cmd: --region
        region: eu-west-1
        service_name_cmd: --service-name
        service_name: ${{ env.SERVICE_NAME }}
        timeout_cmd: --timeout
        timeout: 600



    - name: Release - on production - echo
      shell: bash
      run: echo -e "ðŸ””\nðŸ””       R E L E A S E      P R O D       \nðŸ””"

    - name: Release - on production [on master]
      if: github.ref == 'refs/heads/master' && steps.infrastructure-changes.outputs.terraform == 'false'
      uses: silinternational/ecs-deploy@master
      with:
        aws_access_key_cmd: --aws-access-key
        aws_access_key: ${{ inputs.up-aws-access-key-id }}
        aws_secret_key_cmd: --aws-secret-key
        aws_secret_key: ${{ inputs.up-aws-secret-access-key }}
        cluster_cmd: --cluster
        cluster: up-cluster-production
        image_cmd: --image
        image: ${{ env.DOCKER_IMAGE }}
        region_cmd: --region
        region: eu-west-1
        service_name_cmd: --service-name
        service_name: ${{ env.SERVICE_NAME }}
        timeout_cmd: --timeout
        timeout: 600



    - name: Report - echo [on master]
      if: github.ref == 'refs/heads/master'
      shell: bash
      run: echo -e "ðŸ””\nðŸ””\nðŸ””       R E P O R T       \nðŸ””\nðŸ””"

    - name: Setup - Report [on master]
      if: always() && github.ref == 'refs/heads/master'
      shell: bash
      run: |
        GIT_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        GIT_COMMIT_MSG_NO_SUFFIX="${GIT_COMMIT_MSG#*\(#}"
        GIT_PR="${GIT_COMMIT_MSG_NO_SUFFIX%\)*}"
        GIT_REPO_URL="https://github.com/${{ github.repository }}"
        GIT_PR_URL="$GIT_REPO_URL/pull/$GIT_PR"
        GIT_REPO_NAME="${{ github.repository }}"
        echo "GIT_ACTIONS_URL=<$GIT_REPO_URL/actions/runs/${{ github.run_id }}|${GIT_REPO_NAME#*/}>" >> $GITHUB_ENV
        [[ "$GIT_PR" =~ ^[0-9]+$ ]] && GIT_PR_MSG="<$GIT_PR_URL|$GIT_COMMIT_MSG>" || GIT_PR_MSG="$GIT_COMMIT_MSG"
        echo "GIT_PR_MSG=$GIT_PR_MSG" >> $GITHUB_ENV

    - name: Report - success [on master]
      if: success() && github.ref == 'refs/heads/master'
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.up-slack-webhook-url }}
      with:
        channel-id: "1up-releases"
        payload: |
          {
            "attachments": [
              {
                "color": "#2eb886",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":this-is-fine-fire: ${{ env.GIT_ACTIONS_URL }} deployed successfully!\n${{ env.GIT_PR_MSG }}"
                    }
                  }
                ]
              }
            ]
          }

    - name: Report - failure [on master]
      if: failure() && github.ref == 'refs/heads/master'
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.up-slack-webhook-url }}
      with:
        channel-id: "1up-releases"
        payload: |
          {
            "attachments": [
              {
                "color": "#ed2f00",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":boom: ${{ env.GIT_ACTIONS_URL }} failed!\n${{ env.GIT_PR_MSG }}"
                    }
                  }
                ]
              }
            ]
          }
