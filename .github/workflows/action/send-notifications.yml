name: 'send-notifications'
author: '1up-team'
description: 'Send build notifications to Slack channel'

inputs:
  slack-webhook-url:
    description: 'Slack channel webhook URL to report to'
    required: true
  parent-job-status:
    description: 'parent job status'
    required: true
  service-name:
    description: 'Explicit service name in case the repository does not represent a single service (monorepo)'
    required: false
  success-message:
    description: 'Slack message to send on success'
    required: false
  failure-message:
    description: 'Slack message to send on failure'
    required: false
  always-notify:
    description: 'Override to always send notifications regardless of the current branch'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Setup - Validate Inputs
      shell: bash
      run: |
        [[ "${{ inputs.slack-webhook-url }}" ]] || { echo "input 'slack-webhook-url' cannot be blank"; exit 1; }
        [[ "${{ inputs.parent-job-status }}" ]] || { echo "input 'parent-job-status' cannot be blank"; exit 1; }

    - if: |
        always() &&
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true')
      shell: bash
      run: |
        GIT_SHORT_REPO_NAME=${GITHUB_REPOSITORY##*/}
        GIT_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        GIT_PR=$(echo $GIT_COMMIT_MSG | sed -r 's/.*#([0-9]+).*/\1/')
        GIT_PR_URL="https://github.com/${{ github.repository }}/pull/$GIT_PR"
        [[ "$GIT_PR" =~ ^[0-9]+$ ]] && GIT_PR_MSG="<$GIT_PR_URL|$GIT_COMMIT_MSG>" || GIT_PR_MSG="$GIT_COMMIT_MSG"
        echo "GIT_SHORT_REPO_NAME=$GIT_SHORT_REPO_NAME" >> $GITHUB_ENV
        echo "GIT_PR_MSG=$GIT_PR_MSG" >> $GITHUB_ENV

    - if: |
        always() &&
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true') &&
        inputs.service-name == null
      shell: bash
      run: |
        echo "GIT_ACTIONS_URL=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GIT_SHORT_REPO_NAME>" >> $GITHUB_ENV

    - if: |
        always() && 
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true') && 
        inputs.service-name != null
      shell: bash
      run: |
        echo "GIT_ACTIONS_URL=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GIT_SHORT_REPO_NAME / ${{ inputs.service-name }}>" >> $GITHUB_ENV

    - if: |
        always() &&
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true')
      shell: bash
      env:
        SUCCESS_PARAM: '${{ inputs.success-message }}'
        FAILURE_PARAM: '${{ inputs.failure-message }}'
      run: |
        SUCCESS_MESSAGE=${SUCCESS_PARAM:-':rocket: ${{ env.GIT_ACTIONS_URL }} \n ${{ env.GIT_PR_MSG }}'}
        echo "SUCCESS_MESSAGE=$SUCCESS_MESSAGE" >> $GITHUB_ENV
        FAILURE_MESSAGE=${FAILURE_PARAM:-':boom: ${{ env.GIT_ACTIONS_URL }} \n ${{ env.GIT_PR_MSG }}'}
        echo "FAILURE_MESSAGE=$FAILURE_MESSAGE" >> $GITHUB_ENV

    - name: Report - success [on master]
      if: |
        inputs.parent-job-status == 'success' && 
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true')
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
      with:
        payload: |
          {
            "attachments": [{
              "color": "#2eb886",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJSON(env.SUCCESS_MESSAGE) }}
                }
              }]
            }]
          }

    - name: Report - failure [on master]
      if: |
        inputs.parent-job-status == 'failure' &&
        (github.ref == 'refs/heads/master' || inputs.always-notify == 'true')
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
      with:
        payload: |
          {
            "attachments": [{
              "color": "#ed2f00",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJSON(env.FAILURE_MESSAGE) }}
                }
              }]
            }]
          }
